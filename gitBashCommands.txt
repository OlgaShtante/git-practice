Git bash commands:

cd /disk/folder/folder - to proceed to the required directory;

pwd - to check the current working directory;

git clone value - to clone with SSH;

git remote -v  = git remote --verbose - to check origin details; 

git remote remove originName - to remove remote origin;

git remote add originName originUrl - to add remote origin;

git status - to check the status of the files before the commit;

git add fileName.fileFormat - to add file to the commit;

git commit -m "comment"- to commit file with a comment;
git commit --amend -m "New message" and then git push -f origin branch name - to update the latest commit message

git log - to check the history of commits;

git push - to sync remote and local repositories;

git pull = get fetch + get merge - to get changes from the remote repository;

git show - to see the last commit;

git show -s --pretty=raw atLeastFiveFirstSymbolsOfTheCommit, 
e.g., git show -s --pretty=raw 98d56c - to see the tree and blob(s) of the commit;

git ls-tree atLeastFiveFirstSymbolsOfTheTree, 
e.g., git ls-tree 5ce45d - to see the contents of the tree;

git show atLeastFiveFirstSymbolsOfTheBlob, 
e.g., git show 271893 - to see the content of the blob;

git checkout -- fileName.fileFormat - to discard changes of the file in the working directory;

git checkout . - to discard all changes forever, doesn't work for new files >_< 

git clean -xdf - to remove new files and directories from the working directory;

git reset -- fileName.fileFormat - to move updated file from the 'Staged Changes' to the 'Unstage Changes';

git reset HEAD~numberOfHowManyCommitsNeedToBeRolledBack,
e.g., git reset HEAD~1 = git reset HEAD^ - to reset the last commit,
git reset HEAD~2 = git reset HEAD^^ - to reset two last commit;

git reset --soft/hard HEAD~numberOfHowManyCommitsNeedToBeRolledBack,
e.g., git reset --soft HEAD~1 - to reset the last commit but leave changes in the index ('Staged Changes'),
e.g., git reset --hard HEAD~1 - to reset the last commit and lose these changes forever o_O

git revert atLeastFiveFirstSymbolsOfTheCommit,
e.g., git revert 98d56c - to revert the pushed commit;

git checkout -b branchName - to create a new branch and switch to it; 

git checkout master - to switch back to the master branch;

git merge branchName - to merge changes of the branchName with the current branch; 

git merge --abort - to undo merge;

git checkout --Xtheirs/Xours - to select which changes ( their or your) are more correct to be merged;

git branch --all - to check the list of the branches;

git tag tagName - to add a tag to the last commit;

git tag --list - to check which tags you have;

git push --tags - to push tags;

git stash save "description" - to save local modifications and current state of the working directory & the index;

git stash list - to see stashes;

git stash apply stashName,
e.g., git stash apply stash@{0} -  to remove modifications from the stash;

git gui - to open a portable graphical interface to Git;

git gui& - to work with Git Bash and Git GUI at the same time;

gitk - to open the Git repository browser;

gitk& - to work with Git Bash and Git Repository Browser at the same time;

git --help - guess what:)



Git bash hotkeys:

shift+insert - to paste to the git bash from the clipboard;

ctrl+insert - to copy to the clipboard from the git bash.



Vi (visual editor) hotkeys:

insert - to turn on editing mode

esc - to turn off editing mode

:wq - to write content and quit vi

:q! - to quit vi
